// <auto-generated />
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace MagicOnion
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::MagicOnion;
    using global::MagicOnion.Client;

    public static partial class MagicOnionInitializer
    {
        static bool isRegistered = false;

        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad)]
        public static void Register()
        {
            if(isRegistered) return;
            isRegistered = true;

            MagicOnionClientRegistry<GameKing.Shared.Services.IChatService>.Register((x, y, z) => new GameKing.Shared.Services.ChatServiceClient(x, y, z));

            StreamingHubClientRegistry<GameKing.Shared.Hubs.INinjaKidHub, GameKing.Shared.Hubs.INinjaKidReceiver>.Register((a, _, b, c, d, e) => new GameKing.Shared.Hubs.NinjaKidHubClient(a, b, c, d, e));
        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace MagicOnion.Resolvers
{
    using System;
    using MessagePack;

    public class MagicOnionResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new MagicOnionResolver();

        MagicOnionResolver()
        {

        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.formatter;
        }

        static class FormatterCache<T>
        {
            public static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> formatter;

            static FormatterCache()
            {
                var f = MagicOnionResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class MagicOnionResolverGetFormatterHelper
    {
        static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static MagicOnionResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(9)
            {
                {typeof(global::GameKing.Shared.MessagePackObjects.MarkModel[]), 0 },
                {typeof(global::ItemInfo[]), 1 },
                {typeof(global::MagicOnion.DynamicArgumentTuple<global::GameKing.Shared.MessagePackObjects.GameState, global::GameKing.Shared.MessagePackObjects.GameEndType>), 2 },
                {typeof(global::MagicOnion.DynamicArgumentTuple<int, global::GameKing.Shared.MessagePackObjects.ItemKind>), 3 },
                {typeof(global::MagicOnion.DynamicArgumentTuple<int, global::ItemInfo>), 4 },
                {typeof(global::MagicOnion.DynamicArgumentTuple<int, int, int>), 5 },
                {typeof(global::GameKing.Shared.MessagePackObjects.GameEndType), 6 },
                {typeof(global::GameKing.Shared.MessagePackObjects.GameState), 7 },
                {typeof(global::GameKing.Shared.MessagePackObjects.ItemKind), 8 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::GameKing.Shared.MessagePackObjects.MarkModel>();
                case 1: return new global::MessagePack.Formatters.ArrayFormatter<global::ItemInfo>();
                case 2: return new global::MagicOnion.DynamicArgumentTupleFormatter<global::GameKing.Shared.MessagePackObjects.GameState, global::GameKing.Shared.MessagePackObjects.GameEndType>(default(global::GameKing.Shared.MessagePackObjects.GameState), default(global::GameKing.Shared.MessagePackObjects.GameEndType));
                case 3: return new global::MagicOnion.DynamicArgumentTupleFormatter<int, global::GameKing.Shared.MessagePackObjects.ItemKind>(default(int), default(global::GameKing.Shared.MessagePackObjects.ItemKind));
                case 4: return new global::MagicOnion.DynamicArgumentTupleFormatter<int, global::ItemInfo>(default(int), default(global::ItemInfo));
                case 5: return new global::MagicOnion.DynamicArgumentTupleFormatter<int, int, int>(default(int), default(int), default(int));
                case 6: return new MagicOnion.Formatters.GameEndTypeFormatter();
                case 7: return new MagicOnion.Formatters.GameStateFormatter();
                case 8: return new MagicOnion.Formatters.ItemKindFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace MagicOnion.Formatters
{
    using System;
    using MessagePack;

    public sealed class GameEndTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameKing.Shared.MessagePackObjects.GameEndType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameKing.Shared.MessagePackObjects.GameEndType value, MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }
        
        public global::GameKing.Shared.MessagePackObjects.GameEndType Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            return (global::GameKing.Shared.MessagePackObjects.GameEndType)reader.ReadInt32();
        }
    }

    public sealed class GameStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameKing.Shared.MessagePackObjects.GameState>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameKing.Shared.MessagePackObjects.GameState value, MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }
        
        public global::GameKing.Shared.MessagePackObjects.GameState Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            return (global::GameKing.Shared.MessagePackObjects.GameState)reader.ReadInt32();
        }
    }

    public sealed class ItemKindFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameKing.Shared.MessagePackObjects.ItemKind>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameKing.Shared.MessagePackObjects.ItemKind value, MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }
        
        public global::GameKing.Shared.MessagePackObjects.ItemKind Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            return (global::GameKing.Shared.MessagePackObjects.ItemKind)reader.ReadInt32();
        }
    }


}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace GameKing.Shared.Services {
    using System;
    using MagicOnion;
    using MagicOnion.Client;
    using Grpc.Core;
    using MessagePack;

    [Ignore]
    public class ChatServiceClient : MagicOnionClientBase<global::GameKing.Shared.Services.IChatService>, global::GameKing.Shared.Services.IChatService
    {
        static readonly Method<byte[], byte[]> GenerateExceptionMethod;
        static readonly Func<RequestContext, ResponseContext> GenerateExceptionDelegate;
        static readonly Method<byte[], byte[]> SendReportAsyncMethod;
        static readonly Func<RequestContext, ResponseContext> SendReportAsyncDelegate;

        static ChatServiceClient()
        {
            GenerateExceptionMethod = new Method<byte[], byte[]>(MethodType.Unary, "IChatService", "GenerateException", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
            GenerateExceptionDelegate = _GenerateException;
            SendReportAsyncMethod = new Method<byte[], byte[]>(MethodType.Unary, "IChatService", "SendReportAsync", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
            SendReportAsyncDelegate = _SendReportAsync;
        }

        ChatServiceClient()
        {
        }

        public ChatServiceClient(CallInvoker callInvoker, MessagePackSerializerOptions serializerOptions, IClientFilter[] filters)
            : base(callInvoker, serializerOptions, filters)
        {
        }

        protected override MagicOnionClientBase<IChatService> Clone()
        {
            var clone = new ChatServiceClient();
            clone.host = this.host;
            clone.option = this.option;
            clone.callInvoker = this.callInvoker;
            clone.serializerOptions = this.serializerOptions;
            clone.filters = filters;
            return clone;
        }

        public new IChatService WithHeaders(Metadata headers)
        {
            return base.WithHeaders(headers);
        }

        public new IChatService WithCancellationToken(System.Threading.CancellationToken cancellationToken)
        {
            return base.WithCancellationToken(cancellationToken);
        }

        public new IChatService WithDeadline(System.DateTime deadline)
        {
            return base.WithDeadline(deadline);
        }

        public new IChatService WithHost(string host)
        {
            return base.WithHost(host);
        }

        public new IChatService WithOptions(CallOptions option)
        {
            return base.WithOptions(option);
        }
   
        static ResponseContext _GenerateException(RequestContext __context)
        {
            return CreateResponseContext<string, global::MessagePack.Nil>(__context, GenerateExceptionMethod);
        }

        public global::MagicOnion.UnaryResult<global::MessagePack.Nil> GenerateException(string message)
        {
            return InvokeAsync<string, global::MessagePack.Nil>("IChatService/GenerateException", message, GenerateExceptionDelegate);
        }
        static ResponseContext _SendReportAsync(RequestContext __context)
        {
            return CreateResponseContext<string, global::MessagePack.Nil>(__context, SendReportAsyncMethod);
        }

        public global::MagicOnion.UnaryResult<global::MessagePack.Nil> SendReportAsync(string message)
        {
            return InvokeAsync<string, global::MessagePack.Nil>("IChatService/SendReportAsync", message, SendReportAsyncDelegate);
        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace GameKing.Shared.Hubs {
    using Grpc.Core;
    using MagicOnion;
    using MagicOnion.Client;
    using MessagePack;
    using System;
    using System.Threading.Tasks;

    [Ignore]
    public class NinjaKidHubClient : StreamingHubClientBase<global::GameKing.Shared.Hubs.INinjaKidHub, global::GameKing.Shared.Hubs.INinjaKidReceiver>, global::GameKing.Shared.Hubs.INinjaKidHub
    {
        static readonly Method<byte[], byte[]> method = new Method<byte[], byte[]>(MethodType.DuplexStreaming, "INinjaKidHub", "Connect", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);

        protected override Method<byte[], byte[]> DuplexStreamingAsyncMethod { get { return method; } }

        readonly global::GameKing.Shared.Hubs.INinjaKidHub __fireAndForgetClient;

        public NinjaKidHubClient(CallInvoker callInvoker, string host, CallOptions option, MessagePackSerializerOptions serializerOptions, IMagicOnionClientLogger logger)
            : base(callInvoker, host, option, serializerOptions, logger)
        {
            this.__fireAndForgetClient = new FireAndForgetClient(this);
        }
        
        public global::GameKing.Shared.Hubs.INinjaKidHub FireAndForget()
        {
            return __fireAndForgetClient;
        }

        protected override void OnBroadcastEvent(int methodId, ArraySegment<byte> data)
        {
            switch (methodId)
            {
                case -1297457280: // OnJoin
                {
                    var result = MessagePackSerializer.Deserialize<string>(data, serializerOptions);
                    receiver.OnJoin(result); break;
                }
                case 532410095: // OnLeave
                {
                    var result = MessagePackSerializer.Deserialize<string>(data, serializerOptions);
                    receiver.OnLeave(result); break;
                }
                case 1327937610: // OnGameStart
                {
                    var result = MessagePackSerializer.Deserialize<global::GameKing.Shared.MessagePackObjects.NinjaKidModel>(data, serializerOptions);
                    receiver.OnGameStart(result); break;
                }
                case 1008177111: // OnGameState
                {
                    var result = MessagePackSerializer.Deserialize<DynamicArgumentTuple<global::GameKing.Shared.MessagePackObjects.GameState, global::GameKing.Shared.MessagePackObjects.GameEndType>>(data, serializerOptions);
                    receiver.OnGameState(result.Item1, result.Item2); break;
                }
                case 453572128: // OnPlacedMark
                {
                    var result = MessagePackSerializer.Deserialize<global::GameKing.Shared.MessagePackObjects.MarkModel[]>(data, serializerOptions);
                    receiver.OnPlacedMark(result); break;
                }
                case 308932787: // OnStartTurn
                {
                    var result = MessagePackSerializer.Deserialize<int>(data, serializerOptions);
                    receiver.OnStartTurn(result); break;
                }
                case -221887130: // OnPlacedItem
                {
                    var result = MessagePackSerializer.Deserialize<global::ItemInfo[]>(data, serializerOptions);
                    receiver.OnPlacedItem(result); break;
                }
                case -1796033523: // OnAttackedCell
                {
                    var result = MessagePackSerializer.Deserialize<DynamicArgumentTuple<int, int, int>>(data, serializerOptions);
                    receiver.OnAttackedCell(result.Item1, result.Item2, result.Item3); break;
                }
                case -1577344521: // OnMovedCell
                {
                    var result = MessagePackSerializer.Deserialize<global::GameKing.Shared.MessagePackObjects.MarkModel[]>(data, serializerOptions);
                    receiver.OnMovedCell(result); break;
                }
                case 1959756195: // OnGetItem
                {
                    var result = MessagePackSerializer.Deserialize<DynamicArgumentTuple<int, global::ItemInfo>>(data, serializerOptions);
                    receiver.OnGetItem(result.Item1, result.Item2); break;
                }
                case -1734769397: // NoticeItemUsed
                {
                    var result = MessagePackSerializer.Deserialize<DynamicArgumentTuple<int, global::GameKing.Shared.MessagePackObjects.ItemKind>>(data, serializerOptions);
                    receiver.NoticeItemUsed(result.Item1, result.Item2); break;
                }
                default:
                    break;
            }
        }

        protected override void OnResponseEvent(int methodId, object taskCompletionSource, ArraySegment<byte> data)
        {
            switch (methodId)
            {
                case -733403293: // JoinAsync
                {
                    var result = MessagePackSerializer.Deserialize<int>(data, serializerOptions);
                    ((TaskCompletionSource<int>)taskCompletionSource).TrySetResult(result);
                    break;
                }
                case 1368362116: // LeaveAsync
                {
                    var result = MessagePackSerializer.Deserialize<Nil>(data, serializerOptions);
                    ((TaskCompletionSource<Nil>)taskCompletionSource).TrySetResult(result);
                    break;
                }
                case -788520225: // PlaceMarkAsync
                {
                    var result = MessagePackSerializer.Deserialize<Nil>(data, serializerOptions);
                    ((TaskCompletionSource<Nil>)taskCompletionSource).TrySetResult(result);
                    break;
                }
                case 821761563: // AttackPosAsync
                {
                    var result = MessagePackSerializer.Deserialize<Nil>(data, serializerOptions);
                    ((TaskCompletionSource<Nil>)taskCompletionSource).TrySetResult(result);
                    break;
                }
                case 1146928034: // MovePosAsync
                {
                    var result = MessagePackSerializer.Deserialize<Nil>(data, serializerOptions);
                    ((TaskCompletionSource<Nil>)taskCompletionSource).TrySetResult(result);
                    break;
                }
                case -436752771: // UseItemAsync
                {
                    var result = MessagePackSerializer.Deserialize<Nil>(data, serializerOptions);
                    ((TaskCompletionSource<Nil>)taskCompletionSource).TrySetResult(result);
                    break;
                }
                default:
                    break;
            }
        }
   
        public global::System.Threading.Tasks.Task<int> JoinAsync(global::GameKing.Shared.MessagePackObjects.JoinRequest request)
        {
            return WriteMessageWithResponseAsync<global::GameKing.Shared.MessagePackObjects.JoinRequest, int> (-733403293, request);
        }

        public global::System.Threading.Tasks.Task LeaveAsync()
        {
            return WriteMessageWithResponseAsync<Nil, Nil>(1368362116, Nil.Default);
        }

        public global::System.Threading.Tasks.Task PlaceMarkAsync(int playerIndex, int x, int y)
        {
            return WriteMessageWithResponseAsync<DynamicArgumentTuple<int, int, int>, Nil>(-788520225, new DynamicArgumentTuple<int, int, int>(playerIndex, x, y));
        }

        public global::System.Threading.Tasks.Task AttackPosAsync(int playerIndex, int x, int y)
        {
            return WriteMessageWithResponseAsync<DynamicArgumentTuple<int, int, int>, Nil>(821761563, new DynamicArgumentTuple<int, int, int>(playerIndex, x, y));
        }

        public global::System.Threading.Tasks.Task MovePosAsync(int playerIndex, int x, int y)
        {
            return WriteMessageWithResponseAsync<DynamicArgumentTuple<int, int, int>, Nil>(1146928034, new DynamicArgumentTuple<int, int, int>(playerIndex, x, y));
        }

        public global::System.Threading.Tasks.Task UseItemAsync(global::GameKing.Shared.MessagePackObjects.ItemKind itemKind)
        {
            return WriteMessageWithResponseAsync<global::GameKing.Shared.MessagePackObjects.ItemKind, Nil>(-436752771, itemKind);
        }


        class FireAndForgetClient : global::GameKing.Shared.Hubs.INinjaKidHub
        {
            readonly NinjaKidHubClient __parent;

            public FireAndForgetClient(NinjaKidHubClient parentClient)
            {
                this.__parent = parentClient;
            }

            public global::GameKing.Shared.Hubs.INinjaKidHub FireAndForget()
            {
                throw new NotSupportedException();
            }

            public Task DisposeAsync()
            {
                throw new NotSupportedException();
            }

            public Task WaitForDisconnect()
            {
                throw new NotSupportedException();
            }

            public global::System.Threading.Tasks.Task<int> JoinAsync(global::GameKing.Shared.MessagePackObjects.JoinRequest request)
            {
                return __parent.WriteMessageAsyncFireAndForget<global::GameKing.Shared.MessagePackObjects.JoinRequest, int> (-733403293, request);
            }

            public global::System.Threading.Tasks.Task LeaveAsync()
            {
                return __parent.WriteMessageAsync<Nil>(1368362116, Nil.Default);
            }

            public global::System.Threading.Tasks.Task PlaceMarkAsync(int playerIndex, int x, int y)
            {
                return __parent.WriteMessageAsync<DynamicArgumentTuple<int, int, int>>(-788520225, new DynamicArgumentTuple<int, int, int>(playerIndex, x, y));
            }

            public global::System.Threading.Tasks.Task AttackPosAsync(int playerIndex, int x, int y)
            {
                return __parent.WriteMessageAsync<DynamicArgumentTuple<int, int, int>>(821761563, new DynamicArgumentTuple<int, int, int>(playerIndex, x, y));
            }

            public global::System.Threading.Tasks.Task MovePosAsync(int playerIndex, int x, int y)
            {
                return __parent.WriteMessageAsync<DynamicArgumentTuple<int, int, int>>(1146928034, new DynamicArgumentTuple<int, int, int>(playerIndex, x, y));
            }

            public global::System.Threading.Tasks.Task UseItemAsync(global::GameKing.Shared.MessagePackObjects.ItemKind itemKind)
            {
                return __parent.WriteMessageAsync<global::GameKing.Shared.MessagePackObjects.ItemKind>(-436752771, itemKind);
            }

        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
