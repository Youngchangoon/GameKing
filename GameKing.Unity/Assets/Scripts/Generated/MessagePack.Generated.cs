// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(13)
            {
                { typeof(global::GameKing.Shared.MessagePackObjects.MarkModel[]), 0 },
                { typeof(global::System.Collections.Generic.List<global::GameKing.Shared.MessagePackObjects.CellModel>), 1 },
                { typeof(global::System.Collections.Generic.List<global::GameKing.Shared.MessagePackObjects.ItemType>), 2 },
                { typeof(global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::GameKing.Shared.MessagePackObjects.CellModel>>), 3 },
                { typeof(global::GameKing.Shared.MessagePackObjects.ItemType), 4 },
                { typeof(global::GameKing.Shared.MessagePackObjects.CellModel), 5 },
                { typeof(global::GameKing.Shared.MessagePackObjects.GameStartResponse), 6 },
                { typeof(global::GameKing.Shared.MessagePackObjects.ItemModel), 7 },
                { typeof(global::GameKing.Shared.MessagePackObjects.JoinRequest), 8 },
                { typeof(global::GameKing.Shared.MessagePackObjects.MapModel), 9 },
                { typeof(global::GameKing.Shared.MessagePackObjects.MarkModel), 10 },
                { typeof(global::GameKing.Shared.MessagePackObjects.NinjaKidModel), 11 },
                { typeof(global::ItemPlacedInfo), 12 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::GameKing.Shared.MessagePackObjects.MarkModel>();
                case 1: return new global::MessagePack.Formatters.ListFormatter<global::GameKing.Shared.MessagePackObjects.CellModel>();
                case 2: return new global::MessagePack.Formatters.ListFormatter<global::GameKing.Shared.MessagePackObjects.ItemType>();
                case 3: return new global::MessagePack.Formatters.ListFormatter<global::System.Collections.Generic.List<global::GameKing.Shared.MessagePackObjects.CellModel>>();
                case 4: return new MessagePack.Formatters.GameKing.Shared.MessagePackObjects.ItemTypeFormatter();
                case 5: return new MessagePack.Formatters.GameKing.Shared.MessagePackObjects.CellModelFormatter();
                case 6: return new MessagePack.Formatters.GameKing.Shared.MessagePackObjects.GameStartResponseFormatter();
                case 7: return new MessagePack.Formatters.GameKing.Shared.MessagePackObjects.ItemModelFormatter();
                case 8: return new MessagePack.Formatters.GameKing.Shared.MessagePackObjects.JoinRequestFormatter();
                case 9: return new MessagePack.Formatters.GameKing.Shared.MessagePackObjects.MapModelFormatter();
                case 10: return new MessagePack.Formatters.GameKing.Shared.MessagePackObjects.MarkModelFormatter();
                case 11: return new MessagePack.Formatters.GameKing.Shared.MessagePackObjects.NinjaKidModelFormatter();
                case 12: return new MessagePack.Formatters.ItemPlacedInfoFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.GameKing.Shared.MessagePackObjects
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ItemTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameKing.Shared.MessagePackObjects.ItemType>
    {
        public void Serialize(ref MessagePackWriter writer, global::GameKing.Shared.MessagePackObjects.ItemType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::GameKing.Shared.MessagePackObjects.ItemType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::GameKing.Shared.MessagePackObjects.ItemType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.GameKing.Shared.MessagePackObjects
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class CellModelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameKing.Shared.MessagePackObjects.CellModel>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameKing.Shared.MessagePackObjects.CellModel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.IsOpen);
            formatterResolver.GetFormatterWithVerify<global::GameKing.Shared.MessagePackObjects.ItemModel>().Serialize(ref writer, value.ItemModel, options);
        }

        public global::GameKing.Shared.MessagePackObjects.CellModel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __IsOpen__ = default(bool);
            var __ItemModel__ = default(global::GameKing.Shared.MessagePackObjects.ItemModel);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __IsOpen__ = reader.ReadBoolean();
                        break;
                    case 1:
                        __ItemModel__ = formatterResolver.GetFormatterWithVerify<global::GameKing.Shared.MessagePackObjects.ItemModel>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameKing.Shared.MessagePackObjects.CellModel();
            ____result.IsOpen = __IsOpen__;
            ____result.ItemModel = __ItemModel__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GameStartResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameKing.Shared.MessagePackObjects.GameStartResponse>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameKing.Shared.MessagePackObjects.GameStartResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.PlayerNames, options);
        }

        public global::GameKing.Shared.MessagePackObjects.GameStartResponse Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerNames__ = default(string[]);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PlayerNames__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameKing.Shared.MessagePackObjects.GameStartResponse();
            ____result.PlayerNames = __PlayerNames__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ItemModelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameKing.Shared.MessagePackObjects.ItemModel>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameKing.Shared.MessagePackObjects.ItemModel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::GameKing.Shared.MessagePackObjects.ItemType>().Serialize(ref writer, value.ItemType, options);
        }

        public global::GameKing.Shared.MessagePackObjects.ItemModel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ItemType__ = default(global::GameKing.Shared.MessagePackObjects.ItemType);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __ItemType__ = formatterResolver.GetFormatterWithVerify<global::GameKing.Shared.MessagePackObjects.ItemType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameKing.Shared.MessagePackObjects.ItemModel();
            ____result.ItemType = __ItemType__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameKing.Shared.MessagePackObjects.JoinRequest>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameKing.Shared.MessagePackObjects.JoinRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.RoomName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.UserName, options);
        }

        public global::GameKing.Shared.MessagePackObjects.JoinRequest Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomName__ = default(string);
            var __UserName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __RoomName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __UserName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameKing.Shared.MessagePackObjects.JoinRequest();
            ____result.RoomName = __RoomName__;
            ____result.UserName = __UserName__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MapModelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameKing.Shared.MessagePackObjects.MapModel>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameKing.Shared.MessagePackObjects.MapModel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::GameKing.Shared.MessagePackObjects.CellModel>>>().Serialize(ref writer, value.list, options);
        }

        public global::GameKing.Shared.MessagePackObjects.MapModel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __list__ = default(global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::GameKing.Shared.MessagePackObjects.CellModel>>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __list__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::GameKing.Shared.MessagePackObjects.CellModel>>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameKing.Shared.MessagePackObjects.MapModel();
            ____result.list = __list__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MarkModelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameKing.Shared.MessagePackObjects.MarkModel>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameKing.Shared.MessagePackObjects.MarkModel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.x);
            writer.Write(value.y);
            writer.Write(value.hp);
            writer.Write(value.damage);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::GameKing.Shared.MessagePackObjects.ItemType>>().Serialize(ref writer, value.items, options);
        }

        public global::GameKing.Shared.MessagePackObjects.MarkModel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __x__ = default(int);
            var __y__ = default(int);
            var __hp__ = default(int);
            var __damage__ = default(int);
            var __items__ = default(global::System.Collections.Generic.List<global::GameKing.Shared.MessagePackObjects.ItemType>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __x__ = reader.ReadInt32();
                        break;
                    case 1:
                        __y__ = reader.ReadInt32();
                        break;
                    case 2:
                        __hp__ = reader.ReadInt32();
                        break;
                    case 3:
                        __damage__ = reader.ReadInt32();
                        break;
                    case 4:
                        __items__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::GameKing.Shared.MessagePackObjects.ItemType>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameKing.Shared.MessagePackObjects.MarkModel();
            ____result.x = __x__;
            ____result.y = __y__;
            ____result.hp = __hp__;
            ____result.damage = __damage__;
            ____result.items = __items__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NinjaKidModelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameKing.Shared.MessagePackObjects.NinjaKidModel>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameKing.Shared.MessagePackObjects.NinjaKidModel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<global::GameKing.Shared.MessagePackObjects.MapModel>().Serialize(ref writer, value.MapModel, options);
            formatterResolver.GetFormatterWithVerify<global::GameKing.Shared.MessagePackObjects.MarkModel[]>().Serialize(ref writer, value.MarkModels, options);
            writer.Write(value.CurTurnPlayerIndex);
            writer.WriteNil();
            writer.Write(value.IsMoved);
            writer.Write(value.IsAttacked);
        }

        public global::GameKing.Shared.MessagePackObjects.NinjaKidModel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MapModel__ = default(global::GameKing.Shared.MessagePackObjects.MapModel);
            var __MarkModels__ = default(global::GameKing.Shared.MessagePackObjects.MarkModel[]);
            var __CurTurnPlayerIndex__ = default(int);
            var __IsMoved__ = default(bool);
            var __IsAttacked__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __MapModel__ = formatterResolver.GetFormatterWithVerify<global::GameKing.Shared.MessagePackObjects.MapModel>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __MarkModels__ = formatterResolver.GetFormatterWithVerify<global::GameKing.Shared.MessagePackObjects.MarkModel[]>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __CurTurnPlayerIndex__ = reader.ReadInt32();
                        break;
                    case 4:
                        __IsMoved__ = reader.ReadBoolean();
                        break;
                    case 5:
                        __IsAttacked__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameKing.Shared.MessagePackObjects.NinjaKidModel(__MapModel__);
            ____result.MapModel = __MapModel__;
            ____result.MarkModels = __MarkModels__;
            ____result.CurTurnPlayerIndex = __CurTurnPlayerIndex__;
            ____result.IsMoved = __IsMoved__;
            ____result.IsAttacked = __IsAttacked__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ItemPlacedInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ItemPlacedInfo>
    {


        public void Serialize(ref MessagePackWriter writer, global::ItemPlacedInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.x);
            writer.Write(value.y);
            formatterResolver.GetFormatterWithVerify<global::GameKing.Shared.MessagePackObjects.ItemType>().Serialize(ref writer, value.itemType, options);
        }

        public global::ItemPlacedInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __x__ = default(int);
            var __y__ = default(int);
            var __itemType__ = default(global::GameKing.Shared.MessagePackObjects.ItemType);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __x__ = reader.ReadInt32();
                        break;
                    case 1:
                        __y__ = reader.ReadInt32();
                        break;
                    case 2:
                        __itemType__ = formatterResolver.GetFormatterWithVerify<global::GameKing.Shared.MessagePackObjects.ItemType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ItemPlacedInfo(__x__, __y__, __itemType__);
            ____result.x = __x__;
            ____result.y = __y__;
            ____result.itemType = __itemType__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

